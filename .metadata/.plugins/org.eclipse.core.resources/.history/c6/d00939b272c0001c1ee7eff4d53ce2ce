package com.hashing.coding.revision;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class MyHashSet {

	private final int MAX_VALUE=100000;
	private final int ARRAY_SIZE=100;
	List<List<Integer>> bucket;
	
	public MyHashSet()
	{
		bucket=new ArrayList<>(ARRAY_SIZE);
		for(int i=0;i<ARRAY_SIZE;i++)
		{
			bucket.add(null);
		}
	}

	public void add(int key)
	{
		int index=key%ARRAY_SIZE;
		List<Integer> childList =bucket.get(index); // we need to create child list irrespective of whether bucket is null or not.
		if(childList==null)
		{
			List<Integer> list=new LinkedList<>();
			list.add(key);
			bucket.set(index, list);
			
		}
		else
		{
			if(!childList.contains(key))
			{
				childList.add(key);
			}
		}
	}
	
	public void remove(int key)
	{
	    int index=key%ARRAY_SIZE;
	    List<Integer> childList =bucket.get(index);
	    if(childList!=null)
	    {
	    	childList.remove(Integer.valueOf(key));
	    }
	}
	
	public boolean contains(int key)
	{
		 int index=key%ARRAY_SIZE;
		    List<Integer> childList =bucket.get(index);
			return childList!=null && childList.contains(key);
	}
	
	
	public static void main(String[] args) {
		MyHashSet hash=new MyHashSet();
		//hash.add(25);
		hash.add(200);
		hash.add(300);
		hash.add(250);
		hash.remove(200);
	}

}

package com.hashing.coding.revision;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class HashSetImpl {
	
	private int MAX_VALUE=100000;
	private int ARRAY_SIZE=100;
	List<List<Integer>> bucket;
	
	public HashSetImpl()
	{
		bucket=new ArrayList<>(ARRAY_SIZE);
		for(int i=0;i<ARRAY_SIZE;i++)
		{
			bucket.add(null);
		}
	}
	
	public void add(int key)
	{
		int index=key%ARRAY_SIZE;
		List<Integer> childList=new LinkedList<>();
		if(childList==null)
		{
			bucket.get(index);
			childList.add(key);
			bucket.set(index, childList);
			

		}
		else
			if(!childList.contains(key))
			{
				childList.add(key);
			}
	}
	
	public void remove(int key)
	{
		int index=key%ARRAY_SIZE;
		List<Integer> childList=bucket.get(index);
		if(childList!=null)
		{
			childList.remove(Integer.valueOf(key));
		}
	}
	
	
	

	public static void main(String[] args) {
		HashSetImpl hs=new HashSetImpl();
		hs.add(100);
		hs.add(200);
		hs.add(250);

	}

}
